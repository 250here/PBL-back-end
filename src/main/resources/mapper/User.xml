<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!--写对应的接口名-->
<mapper namespace="com.pbl.backend.dao.UserDao">

    <resultMap id="BaseResultMap" type="com.pbl.backend.entity.User">
        <id column="user_id" property="id" jdbcType="VARCHAR"/>
        <result column="user_name" property="username" jdbcType="VARCHAR"/>
        <result column="user_password" property="password" jdbcType="VARCHAR"/>
        <result column="photo_path" property="photoPath" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="RoleMap" type="com.pbl.backend.entity.Role">
        <id column="role_id" property="id" javaType="INTEGER" />
        <result column="role_name" property="name" jdbcType="VARCHAR"/>
    </resultMap>

<!--        Role findRoleByUserId(@Param("userId")Integer userId);-->
    <select id="findRoleByUserId" parameterType="String" resultMap="RoleMap">
        select role.*
        from role
        where role.role_id=(select user_role.role_id from user_role where user_role.user_id = #{userId})
    </select>


<!--User loadUserByUsername(@Param("userName")String userName);-->
    <select id="loadUserByUsername" parameterType="String" resultMap="BaseResultMap">
        select *
        from user
        where user_name=#{userName}
    </select>


<!--    void add(User user);-->
    <insert id="add" parameterType="com.pbl.backend.entity.User" useGeneratedKeys="true" keyProperty="userId">
        insert into user(user_id,user_name,user_password,photo_path)
        values(#{id},#{username},#{password},#{photoPath})
    </insert>
<!---->
<!--    void addRole(@Param("userId")String userId, @Param("roleId")int roleId);-->
    <insert id="addRole">
        insert into user_role(user_id,role_id)
        values(#{userId},#{roleId})
    </insert>


    <!--String getPassword(String userId)-->
    <select id="getPassword" resultType="String">
        select password from user where id = #{userId}
    </select>

    <!--Integer updatePasswordOFUser(String userId, String passwordNew);-->
    <update id="updatePasswordOFUser">
        update user set [user](password) values(#{passwordNew}) where id = #{userId}
    </update>

    <!--Integer uploadPhoto(String userId, String photoPath)-->
    <update id="uploadPhoto" >
         update user set photo_path=#{photoPath} where user_id=#{userId}
    </update>

    <!--void updatePhoto(String userId, String photoPath);-->
    <update id="updatePhoto" >
        update user set user(photo_path) values(#{photoPath}) where user_id = #{userId}
    </update>

    <!--String getPhoto(String userId)-->
    <select id="getPhoto" parameterType="String" resultType="String">
        select photo_path from user where user_id = #{userId}
    </select>

<!--    List<User> getAllUser();-->
    <select id="getAllUser" resultMap="BaseResultMap">
        select * from user
    </select>

<!--    Role getUserRole(String userId);-->
    <select id="getUserRole" parameterType="com.pbl.backend.entity.Role" resultMap="RoleMap">
        select *
        from user_role natural join role
        where user_id=#{userId}
    </select>

<!--    Integer deleteUserById(@Param("userId")String userId);-->
    <delete id="deleteUserById" parameterType="String">
        delete from user where user_id=#{userId}
    </delete>
</mapper>