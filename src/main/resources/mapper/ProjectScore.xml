<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pbl.backend.dao.ProjectScoreDao">


    <resultMap id="BaseResultMap" type="com.pbl.backend.entity.ProjectScore">
        <id column="user_id" property="userId" jdbcType="VARCHAR"/>
        <id column="project_id" property="projectId" jdbcType="INTEGER"/>
<!--        <result column="project_name" property="projectName" jdbcType="VARCHAR"/>-->
<!--        <result column="user_name" property="userName" jdbcType="VARCHAR"/>-->
        <result column="student_grade" property="stuGrade" jdbcType="INTEGER"/>
        <result column="teacher_grade" property="teacherGrade" jdbcType="INTEGER"/>
        <result column="participation" property="participation" jdbcType="INTEGER" />
        <result column="group_id" property="groupId" jdbcType="INTEGER"/>
        <result column="evaluate_flag" property="isEvaluated" jdbcType="INTEGER"/>
        <association property="userName" select="getUserNameById" javaType="string" column="{userId=user_id}"/>
    </resultMap>

    <select id="getUserNameById" resultType="string">
        select user.user_name
        from user
        where user_id=#{userId}
    </select>


<!--    //根据项目ID删除该项目所有成绩信息-->
<!--    int deleteScoresByProjectId(@Param("projectId")int projectId);-->
    <delete id="deleteScoresByProjectId" parameterType="int">
        delete from student_pj where project_id=#{projectId}
    </delete>

<!--    //删除学生与某个项目的关联信息-->
<!--    int deleteStuProjectInfo(@Param("projectId")int projectId, @Param("stuId")String stuId);-->
    <delete id="deleteStuProjectInfo">
        delete from student_pj where project_id=#{projectId} and user_id=#{stuId}
    </delete>

<!--    //新增学生与某个项目的关联信息-->
<!--    int addStuProjectInfo(@Param("projectId")int projectId, @Param("stuId")String stuId,@Param("studentGrade")int studentGrade,@Param("teacherGrade")int teacherGrade);-->
    <insert id="addStuProjectInfo">
        insert into student_pj(project_id, user_id, student_grade, teacher_grade)
        values(#{projectId},#{stuId},#{studentGrade},#{teacherGrade})
    </insert>

<!--    //根据projectId和stuId,获取该学生成绩信息-->
<!--    int getPjScoreByPjIdAndStuId(@Param("projectId")int projectId, @Param("stuId")String stuId);-->
    <select id="getPjScoreByPjIdAndStuId" resultMap="BaseResultMap">
        select *
        from student_pj
        where project_id=#{projectId} and user_id=#{stuId}
    </select>

    <select id="getPjScoreByPjId" resultMap="BaseResultMap">
        select *
        from student_pj left join user_group
        on student_pj.user_id=user_group.user_id
        where student_pj.project_id=#{projectId}
    </select>

    <update id="updateParticipation">
        update student_pj
        set participation=participation+1
        where project_id=#{projectId} and user_id=#{userId}
    </update>

    <update id="updateStuGrade">
        update student_pj
        set teacher_grade=#{param3}
        where project_id=#{param1} and user_id=#{param2}
    </update>

    <update id="updateStuEvaluate">
        update student_pj
        set student_grade=#{param3}
        where project_id=#{param1} and user_id=#{param2}
    </update>

    <update id="updateFinishedEvaluate">
        update student_pj
        set evaluate_flag=1
        where project_id=#{param1} and user_id=#{param2}
    </update>

</mapper>